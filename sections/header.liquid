<header class="site-header" role="banner">
  <div class="header-content{% if section.settings.logo == blank %} header-content--no-logo{% endif %}">
    <div class="header-left">
      <!-- Desktop brand logo on the left -->
      <a href="{{ routes.root_url }}" class="header-brand" aria-label="{{ 'general.home' | t }}">
        <img
            src="https://cdn.shopify.com/s/files/1/0954/9840/4181/files/logo.png?v=1761399870"
            alt="{{ shop.name }}"
            class="brand-logo"
            loading="eager"
            width="220"
            height="60"
        >
      </a>
      <!-- In-header burger (left), mobile/tablet only -->
      <button type="button" class="sidebar-toggle sidebar-toggle--in-header" aria-label="Open menu">
        <span class="hamburger-line" aria-hidden="true"></span>
        <span class="hamburger-line" aria-hidden="true"></span>
        <span class="hamburger-line" aria-hidden="true"></span>
      </button>
    </div>
    <!-- Center logo (star) - mobile/tablet only -->
    <div class="header-center">
      <a href="{{ routes.root_url }}" class="star-logo" aria-label="{{ 'general.home' | t }}">
        <img
          class="star-logo__img star-logo__img--default"
          src="https://cdn.shopify.com/s/files/1/0954/9840/4181/files/logo_white.png?v=1761517669"
          alt="{{ shop.name }}"
          width="28"
          height="28"
          loading="eager"
        >
        <img
          class="star-logo__img star-logo__img--hover"
          src="https://cdn.shopify.com/s/files/1/0954/9840/4181/files/logo_9a4827e8-bf2c-4da8-b43b-dc53bfbf1ea0.png?v=1761517669"
          alt=""
          aria-hidden="true"
          width="28"
          height="28"
          loading="eager"
        >
      </a>
    </div>
    <div class="header-right">
      <!-- Actions: FLAG ‚Üí SEARCHBAR ‚Üí CART ‚Üí CHECKOUT -->
      <div class="header-actions">
        {% if localization.available_languages.size > 1 %}
          <div class="header-locale">
            <details class="locale-switcher">
              <summary aria-label="Language selector">
                {% assign current_prefix = localization.language.iso_code | split: '-' | first | downcase %}
                {% case current_prefix %}
                  {% when 'en' -%}
                    {%- assign current_flag_asset = 'flag-us.svg' -%}
                    {%- assign current_flag_alt = 'English' %}
                  {% when 'pt' -%}
                    {%- assign current_flag_asset = 'flag-pt.svg' -%}
                    {%- assign current_flag_alt = 'Portugu√™s' %}
                  {% else -%}
                    {%- assign current_flag_asset = '' -%}
                    {%- assign current_flag_alt = localization.language.endonym_name %}
                {% endcase %}
                {% if current_flag_asset != '' %}
                  <img
                    class="locale-flag"
                    src="{{ current_flag_asset | asset_url }}"
                    alt="{{ current_flag_alt }}"
                    width="26"
                    height="18"
                    loading="lazy"
                  >
                {% else %}
                  <span class="locale-flag" aria-hidden="true">üè≥Ô∏è</span>
                {% endif %}
              </summary>
              <div class="locale-list">
                {% for language in localization.available_languages %}
                  {% assign prefix = language.iso_code | split: '-' | first | downcase %}
                  {% case prefix %}
                    {% when 'en' -%}
                      {%- assign flag_asset = 'flag-us.svg' -%}
                      {%- assign flag_alt = 'English' -%}
                      {%- assign flag_label = 'ENGLISH' %}
                    {% when 'pt' -%}
                      {%- assign flag_asset = 'flag-pt.svg' -%}
                      {%- assign flag_alt = 'Portugu√™s' -%}
                      {%- assign flag_label = 'PORTUGUESE' %}
                    {% else -%}
                      {%- assign flag_asset = '' -%}
                      {%- assign flag_alt = language.endonym_name -%}
                      {%- assign flag_label = language.endonym_name %}
                  {% endcase %}
                  {% form 'localization' %}
                    <input type="hidden" name="locale_code" value="{{ language.iso_code }}">
                    <button
                      type="submit"
                      class="locale-option"
                      {% if language.iso_code == localization.language.iso_code %}
                        aria-current="true" disabled
                      {% endif %}
                    >
                      {% if flag_asset != '' %}
                        <img
                          class="locale-flag"
                          src="{{ flag_asset | asset_url }}"
                          alt="{{ flag_alt }}"
                          width="26"
                          height="18"
                          loading="lazy"
                        >
                      {% else %}
                        <span class="locale-flag" aria-hidden="true">üè≥Ô∏è</span>
                      {% endif %}
                      <span class="locale-name">{{ flag_label }}</span>
                    </button>
                  {% endform %}
                {% endfor %}
              </div>
            </details>
          </div>
        {% endif %}

        <!-- Inline search bar placed after flag (desktop), hidden on mobile -->
        <div class="header-search">
          <form action="{{ routes.search_url }}" method="get" class="search-form">
            <div class="search-input-wrapper">
              <input
                type="search"
                name="q"
                placeholder="{{ 'search.placeholder' | t }}"
                class="search-input"
                value="{{ search.terms | escape }}"
                aria-label="{{ 'search.title' | t }}"
              >
              <button type="submit" class="search-button" aria-label="{{ 'search.submit' | t }}">
                <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none">
                  <path d="M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z" stroke="currentColor" stroke-width="2"/>
                </svg>
              </button>
            </div>
          </form>
        </div>

        <!-- Mobile search trigger (icon); hidden on desktop -->
        <button type="button" class="search-trigger search-trigger--actions" aria-label="{{ 'search.title' | t }}">
          <svg class="search-icon" width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
            <path d="M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z" stroke="currentColor" stroke-width="2"/>
          </svg>
        </button>
        {% if shop.customer_accounts_enabled %}
          <a href="{{ routes.account_url }}" class="header-account" aria-label="{{ 'customers.login.title' | t }}">
            <svg class="nav-icon" width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
              <path d="M12 12c2.761 0 5-2.239 5-5s-2.239-5-5-5-5 2.239-5 5 2.239 5 5 5Zm0 2c-4.418 0-8 2.239-8 5v1h16v-1c0-2.761-3.582-5-8-5Z" fill="currentColor"/>
            </svg>
            <span class="nav-text">{{ 'customers.login.title' | t }}</span>
          </a>
        {% endif %}

        <a href="{{ routes.cart_url }}" class="header-cart" id="cart-toggle" aria-label="{{ 'cart.title' | t }}">
          <svg class="nav-icon" width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
            <!-- Simple cart icon with wheels -->
            <path d="M6 6h14l-2 8H8L6 6Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round" fill="none"/>
            <path d="M6 6L5 3H3" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <circle cx="9" cy="18" r="1.5" fill="currentColor"/>
            <circle cx="17" cy="18" r="1.5" fill="currentColor"/>
          </svg>
          <span class="cart-text nav-text">{{ 'cart.title' | t }}</span>
          <span class="cart-count" id="cart-count">({{ cart.item_count }})</span>
        </a>

        <a href="/checkout" class="checkout-link" aria-label="{{ 'cart.checkout' | t }}">
          <svg class="nav-icon" width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
            <rect x="3" y="5" width="18" height="14" rx="2" ry="2" stroke="currentColor" stroke-width="2"/>
            <path d="M3 10h18" stroke="currentColor" stroke-width="2"/>
            <rect x="6.5" y="12.5" width="6" height="3" fill="currentColor"/>
          </svg>
          <span class="nav-text">{{ 'cart.checkout' | t }}</span>
        </a>
      </div>
    </div>
  </div>
</header>
<div id="site-header-spacer" class="site-header-spacer" aria-hidden="true"></div>

<!-- Search Modal (mobile) -->
<div class="search-overlay" id="search-overlay"></div>
<div class="search-modal" id="search-modal" role="dialog" aria-modal="true" aria-label="{{ 'search.title' | t }}">
  <div class="search-modal-content">
    <form action="{{ routes.search_url }}" method="get">
      <div class="search-input-wrapper">
        <input
          id="search-modal-input"
          type="search"
          name="q"
          placeholder="{{ 'search.placeholder' | t }}"
          class="search-input"
          aria-label="{{ 'search.title' | t }}"
        >
        <button type="submit" class="search-button" aria-label="{{ 'search.submit' | t }}">
          <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none">
            <path d="M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z" stroke="currentColor" stroke-width="2"/>
          </svg>
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Cart Sidebar -->
<div class="cart-sidebar" id="cart-sidebar">
  <div class="cart-sidebar-content">
    <div class="cart-header">
      <h3>{{ 'cart.title' | t }}</h3>
      <button class="cart-close" id="cart-close">
        <svg width="24" height="24" viewBox="0 0 24 24">
          <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
      </button>
    </div>

    <div class="cart-items" id="cart-items">
      <!-- Cart items will be loaded here -->
    </div>

    <div class="cart-footer">
      <div class="cart-total">
        <span>{{ 'cart.subtotal' | t }}: </span>
        <span id="cart-total">{% render 'price', amount: cart.total_price %}</span>
      </div>
      <div class="cart-actions">
        <button class="btn btn--secondary btn--block" id="clear-cart-btn">{{ 'cart.clear' | t }}</button>
        <a href="{{ routes.cart_url }}" class="btn btn--secondary btn--block">{{ 'cart.goToCartBtn' | t }}</a>
        <a href="/checkout" class="btn btn--primary btn--block">{{ 'cart.checkout' | t }}</a>
      </div>
    </div>
  </div>
</div>

<div class="cart-overlay" id="cart-overlay"></div>

<!-- Clear Cart Confirmation Modal -->
<div class="clear-cart-modal" id="clear-cart-modal">
  <div class="modal-content">
    <h3>{{ 'cart.clear_confirm_title' | t }}</h3>
    <p>{{ 'cart.clear_confirm_message' | t }}</p>
    <div class="modal-actions">
      <button class="btn btn--secondary" id="modal-cancel">{{ 'general.cancel' | t }}</button>
      <button class="btn btn--primary" id="modal-confirm">{{ 'cart.clear' | t }}</button>
    </div>
  </div>
</div>
<div class="modal-overlay" id="modal-overlay"></div>

{% stylesheet %}
  :root {
    --announcement-height: 40px;
    --header-pad-top: 32px; /* space from announcement bar to header icons */
    --header-pad-top-mobile: 20px;
    --header-row-min-height: 36px; /* keep burger and actions equal height */
    --star-logo-size-mobile: clamp(44px, 9vw, 72px); /* responsive star size on mobile */
  }
  .site-header {
    background-color: var(--color-background);
    border-bottom: none;
    padding: var(--header-pad-top) 0;
    position: fixed;
    top: var(--announcement-height); /* fixed below announcement bar */
    left: 0;
    right: 0;
    width: 100%;
    z-index: 998; /* Keep below announcement bar (1000) and below modal overlays (>=1099) */
    /* Fixed icon size across breakpoints */
    --header-icon-size: 22px;
  }
  .site-header-spacer {
    height: var(--site-header-height, 0px);
  }

  /* Right-align header when there is no logo */
  .header-content--no-logo {
    justify-content: flex-end;
    width: 100%;
    padding-right: 0;
  }

  .header-content {
    max-width: 100%;
    margin: 0 auto;
    padding: 0 40px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 40px;
  }
  .header-center {
    display: none;
  }

  /* No-logo: push group to the far right and remove right padding */
  .header-content.header-content--no-logo {
    justify-content: space-between; /* burger left, actions right */
    padding-right: 0;
    width: 100%;
  }
  .header-left {
    display: flex;
    align-items: center;
    flex: 0 0 auto;
  }
  .header-left .header-brand {
    display: inline-flex;
    align-items: center;
    text-decoration: none;
    color: inherit;
    min-height: var(--header-row-min-height);
    margin-right: 14px;
  }
  .header-left .brand-logo {
    display: block;
    height: 64px;
    width: auto;
  }
  .header-left .sidebar-toggle--in-header {
    display: none; /* hidden on desktop */
    flex-direction: column;
    align-items: center; /* center lines vertically in button */
    justify-content: center; /* center lines vertically in button */
    gap: 4px;
    padding: 6px 8px;
    min-height: var(--header-row-min-height);
    background: transparent;
    border: 0;
    color: var(--color-foreground);
    line-height: 1;
  }
  .header-left .sidebar-toggle--in-header .hamburger-line {
    width: 22px;
    height: 2px;
    background: currentColor;
    transition: background-color 0.2s ease;
  }
  .header-left .sidebar-toggle--in-header:hover {
    color: var(--color-primary);
  }

  .header-content.header-content--no-logo .header-search {
    flex: 0 0 auto;
    max-width: 300px;
  }

  .header-logo {
    flex-shrink: 0;
  }

  /* Language switcher */
  .header-locale {
    position: relative;
  }
  .locale-switcher {
    display: inline-block;
  }
  .locale-switcher[open] .locale-list {
    display: grid;
  }
  .locale-switcher summary {
    list-style: none;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 6px 8px;
    border: none;
    color: var(--color-foreground);
    background: var(--color-background);
    text-transform: none;
    font-size: 14px;
    border-radius: 0;
    line-height: 1;
  }
  .locale-switcher summary:hover {
    color: var(--color-primary);
  }
  .locale-switcher summary::-webkit-details-marker {
    display: none;
  }
  .locale-flag {
    display: inline-block;
    width: 26px;
    height: 18px;
    line-height: 1;
    vertical-align: middle;
    max-width: none;
    min-width: 26px;
    min-height: 18px;
  }
  .locale-option .locale-flag {
    width: 26px;
    height: 18px;
    max-width: none;
    min-width: 26px;
    min-height: 18px;
  }
  .locale-list {
    display: none;
    position: absolute;
    right: 0;
    top: calc(100% + 8px);
    background: var(--color-background);
    border: none;
    padding: 8px;
    min-width: 160px;
    z-index: 20;
    gap: 6px;
  }
  .locale-option {
    display: grid;
    grid-auto-flow: column;
    justify-content: start;
    gap: 8px;
    width: 100%;
    padding: 6px 8px;
    color: var(--color-foreground);
    background: transparent;
    background-color: transparent !important;
    border: none !important;
    border-radius: 0;
    cursor: pointer;
    font-size: 14px;
  }

  .locale-option[disabled] {
    opacity: 0.6;
    cursor: default;
  }

  .locale-option:hover:not([disabled]) {
    background: var(--color-foreground);
    color: var(--color-primary);
  }

  .locale-option .locale-name {
    font-weight: 600;
    letter-spacing: 0.3px;
  }

  .header-logo a {
    display: block;
    text-decoration: none;
  }

  .logo-img {
    height: 40px;
    width: auto;
  }

  .logo-placeholder {
    background-color: #ffffff;
    color: #000000;
    padding: 15px 20px;
    text-align: center;
    font-weight: bold;
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .header-search {
    flex: 1;
    max-width: clamp(220px, 38vw, 420px);
    position: relative;
    margin-right: 6px;
  }

  .search-form {
    width: 100%;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-input {
    width: 100%;
    padding: 12px 50px 12px 15px;
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    color: var(--color-foreground);
    font-size: 14px;
    border-radius: 0;
  }

  /* Style the native clear (X) button in search inputs */
  .search-input::-webkit-search-cancel-button {
    -webkit-appearance: none;
    height: 14px;
    width: 14px;
    background-color: var(--color-primary);
    /* Use mask to color the SVG with background-color */
    -webkit-mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath d='M3 3l10 10M13 3L3 13' stroke='%23000' stroke-width='2' stroke-linecap='round'/%3E%3C/svg%3E");
    -webkit-mask-repeat: no-repeat;
    -webkit-mask-position: center;
    -webkit-mask-size: contain;
    cursor: pointer;
  }

  .search-input::placeholder {
    color: #666666;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  /* Search trigger (mobile only) */
  .search-trigger {
    border: none !important;
    background-color: transparent !important;
    display: none;
    background: transparent;
    border: 0;
    color: var(--color-foreground);
    padding: 6px;
    cursor: pointer;
  }
  .search-trigger:hover {
    color: var(--color-primary);
    background-color: transparent;
    border-color: transparent;
  }

  .search-button {
    position: absolute;
    right: 2px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none !important;
    color: var(--color-foreground) !important;
    padding: 8px 12px;
    cursor: pointer;
    transition: color 0.3s ease;
  }

  .search-button:hover{
    border-color: var(--color-primary);
    padding: 12px 14px;
    right: 0;
  }

  /* Modal search */
  .search-modal {
    position: fixed;
    top: calc(var(--announcement-height) + var(--site-header-height, 0px));
    left: 0;
    right: 0;
    bottom: 0;
    display: none;
    align-items: flex-start;
    justify-content: center;
    padding-top: 40px;
    z-index: 1100;
  }
  .search-modal.open {
    display: flex;
  }
  .search-modal .search-modal-content {
    width: min(92vw, 640px);
    background: var(--color-background);
    border: 1px solid var(--color-border);
    padding: 12px;
    border-radius: 6px;
  }
  .search-overlay {
    position: fixed;
    top: calc(var(--announcement-height) + var(--site-header-height, 0px));
    left: 0;
    width: 100vw;
    height: calc(100vh - (var(--announcement-height) + var(--site-header-height, 0px)));
    background: rgba(0, 0, 0, 0.5);
    z-index: 1099;
    display: none;
  }
  .search-overlay.open {
    display: block;
  }
  .search-summary::-webkit-details-marker {
    display: none;
  }

  .header-actions {
    display: flex;
    align-items: center;
    gap: clamp(10px, 2vw, 30px);
    white-space: nowrap;
    overflow: visible;
  }
  .header-right {
    flex: 1 1 auto;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: 8px;
  }
  /* Desktop: order FLAG (inside .header-actions) ‚Üí SEARCHBAR ‚Üí BURGER ‚Üí CART ‚Üí CHECKOUT */
  .header-actions {
    order: 1;
  }
  .header-actions .header-locale {
    order: 1;
  }
  .header-actions .header-search {
    order: 2;
  }
  .header-actions .header-cart {
    order: 3;
  }
  .header-actions .checkout-link {
    order: 4;
  }
  .header-actions a {
    white-space: nowrap;
  }
  .header-actions a:hover,
  .search-trigger:hover {
    color: var(--color-primary);
    background: transparent;
  }

  .header-account,
  .header-cart,
  .checkout-link {
    color: var(--color-foreground);
    text-decoration: none;
    font-size: 14px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: color 0.3s ease;
  }
  .header-actions a {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    line-height: 1;
    min-width: 0;
    min-height: var(--header-row-min-height);
  }
  .header-actions svg {
    display: block;
    width: var(--header-icon-size);
    height: var(--header-icon-size);
  }
  .header-actions .nav-icon,
  .header-actions .search-icon,
  .header-search .search-icon,
  .search-trigger .search-icon {
    width: var(--header-icon-size);
    height: var(--header-icon-size);
    min-width: var(--header-icon-size);
    min-height: var(--header-icon-size);
    flex: 0 0 var(--header-icon-size);
  }
  .search-trigger {
    line-height: 1;
    display: none;
    min-height: var(--header-row-min-height);
    align-items: center;
    justify-content: center;
  }
  .header-cart {
    gap: 0;
    align-items: center;
  }
  /* Cart: default both white; on hover both accent */
  .header-cart .cart-count {
    color: var(--color-foreground);
  }
  .header-cart:hover .cart-count {
    color: var(--color-primary);
  }
  .header-cart:hover .nav-icon {
    color: var(--color-primary);
  }
  .header-right {
    display: flex;
    align-items: center;
    gap: 8px;
    justify-content: flex-end;
    margin-right: 40px;
  }

  /* Header-aligned burger */
  /* header burger removed */

  /* Icon/text behavior */
  .nav-icon {
    display: inline-block;
    vertical-align: middle;
  }
  .nav-text {
    display: inline;
  }

  .header-account:hover,
  .header-cart:hover,
  .checkout-link:hover {
    color: var(--color-primary);
  }

  .cart-count {
    font-size: 14px;
    font-weight: 500;
    margin-left: -4px; /* pull closer to icon */
    line-height: 1;
    letter-spacing: 0;
    transform: translateY(-3px); /* nudge slightly upward */
  }

  /* Cart Sidebar */
  .cart-sidebar {
    position: fixed;
    top: 0;
    right: -400px;
    width: 400px;
    height: 100vh;
    background-color: var(--color-background);
    border-left: 1px solid var(--color-border);
    outline: 1px solid var(--color-border);
    z-index: 1000;
    transition: right 0.3s ease;
  }

  .cart-sidebar.open {
    z-index: 100000;
    right: 0;
  }

  .cart-sidebar-content {
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .cart-header {
    padding: 20px;
    border-bottom: 1px solid var(--color-border);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .cart-header h3 {
    color: var(--color-foreground);
    font-size: 18px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin: 0;
  }

  .cart-close {
    background: none;
    border: none;
    color: var(--color-foreground);
    cursor: pointer;
    padding: 5px;
    transition: color 0.3s ease;
  }

  .cart-items {
    flex: 1;
    overflow-y: auto;
    padding: 12px;
  }

  .cart-item {
    display: flex;
    gap: 10px;
    padding-bottom: 12px;
    margin-bottom: 12px;
    border-bottom: 1px solid var(--color-border);
  }

  .cart-item:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }

  /* Custom scrollbar for cart items */
  .cart-items {
    scrollbar-width: thin; /* Firefox */
    scrollbar-color: var(--color-primary) color-mix(in oklab, var(--color-surface), var(--color-background) 60%);
  }
  .cart-items::-webkit-scrollbar {
    width: 10px;
  }
  .cart-items::-webkit-scrollbar-track {
    background: color-mix(in oklab, var(--color-surface), var(--color-background) 60%);
    border-left: 1px solid var(--color-border);
  }
  .cart-items::-webkit-scrollbar-thumb {
    background: var(--color-primary);
    border: 2px solid color-mix(in oklab, var(--color-surface), var(--color-background) 60%);
    border-radius: 8px;
  }
  .cart-items::-webkit-scrollbar-thumb:hover {
    background: color-mix(in oklab, var(--color-primary), var(--color-foreground) 15%);
  }

  .cart-item-image {
    width: 76px;
    height: 76px;
    flex-shrink: 0;
    border-radius: 4px;
    overflow: hidden;
  }

  .cart-item-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background-color: transparent;
  }

  .cart-item-details {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .cart-item-title {
    color: var(--color-foreground);
    font-size: 15px;
    font-weight: 500;
    line-height: 1.25;
  }

  .cart-item-variant {
    color: #888888;
    font-size: 13px;
  }

  .cart-item-price {
    color: var(--color-primary);
    font-size: 15px;
    font-weight: 600;
  }

  .cart-item-row {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 10px;
    margin-top: 2px;
  }

  .cart-item-stock {
    color: var(--color-foreground);
    font-size: 10px;
    text-transform: uppercase;
    letter-spacing: 0.4px;
    font-weight: 500;
  }

  .cart-item-quantity {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-top: 0;
  }

  .quantity-btn {
    --btn-padding-x: 0;
    --btn-padding-y: 0;
    --btn-radius: 0;
    --btn-border: color-mix(in oklab, var(--color-foreground), transparent 35%);
    --btn-color: var(--color-foreground);
    --btn-hover-bg: color-mix(in oklab, var(--color-foreground), transparent 85%);
    --btn-hover-border: color-mix(in oklab, var(--color-foreground), transparent 20%);
    width: 32px;
    height: 32px;
    font-size: 15px;
    font-weight: 700;
    letter-spacing: 0.4px;
  }

  .quantity-btn:disabled {
    opacity: 0.35;
    cursor: not-allowed;
    --btn-border: color-mix(in oklab, var(--color-border), transparent 10%);
    --btn-hover-bg: transparent;
    --btn-hover-border: color-mix(in oklab, var(--color-border), transparent 10%);
  }

  .quantity-display {
    color: var(--color-foreground);
    font-size: 15px;
    min-width: 22px;
    text-align: center;
  }

  .cart-footer {
    padding: 35px 25px;
    border-top: 1px solid var(--color-border);
  }

  .cart-total {
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: var(--color-foreground);
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 12px;
  }

  .cart-actions {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  .cart-actions .btn {
    width: 100%;
    text-align: center;
  }

  .cart-view-btn {
    --btn-border: color-mix(in oklab, var(--color-border), transparent 15%);
    --btn-hover-border: color-mix(in oklab, var(--color-border), var(--color-primary) 20%);
  }

  .cart-view-btn:hover {
    background-color: var(--color-foreground);
    color: var(--color-background);
    text-decoration: none;
  }

  .cart-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .cart-overlay.open {
    z-index: 10000;
    opacity: 1;
    visibility: visible;
  }

  .cart-empty {
    text-align: center;
    color: var(--color-foreground);
    padding: 26px 18px;
    border: 1px dashed var(--color-border);
    margin: 20px 8px;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .cart-empty p {
    font-size: 14px;
    margin: 0;
  }

  @media (max-width: 1024px) {
    .header-content {
      padding: 0 20px;
      gap: 20px;
    }
    .header-content.header-content--no-logo {
      padding-right: 0;
    }
    .header-content.header-content--no-logo .header-search {
      max-width: 260px;
    }
    .header-content--no-logo {
      padding-right: 0;
    }
    .header-search {
      max-width: 300px;
    }
    .header-actions {
      gap: 12px;
    }
    .cart-sidebar {
      width: 350px;
      right: -350px;
    }
  }

  /* Mid desktop: keep everything on one line by hiding text labels and shrinking search a bit */
  @media (max-width: 1100px) {
    .header-actions .nav-text {
      display: none;
    }
    .header-search {
      max-width: clamp(180px, 34vw, 340px);
    }
  }

  @media (max-width: 768px) {
    .site-header {
      padding: var(--header-pad-top-mobile) 0;
    } /* remains sticky with same padding on mobile */
    .header-content {
      /* Use grid to keep center logo perfectly centered regardless of left/right widths */
      display: grid;
      grid-template-columns: auto 1fr auto;
      align-items: center;
      gap: clamp(16px, 6vw, 40px);
      position: relative; /* anchor for absolute star centering */
    }
    .header-content.header-content--no-logo {
      padding-right: 0;
    }
    .header-content--no-logo {
      padding-right: 0;
    }
    .header-left {
      display: flex;
      align-items: center;
      flex: 0 0 auto;
      justify-self: start;
      grid-column: 1;
    }
    .header-left .header-brand {
      display: none;
    }
    .header-left .sidebar-toggle--in-header {
      display: inline-flex;
    }
    /* Middle spacer keeps equal visual balance while star is absolutely centered */
    .header-center {
      display: flex;
      justify-content: center;
      align-items: center;
      grid-column: 2;
      margin-top: 0;
    }
    .star-logo {
      position: relative;
      display: grid;
      place-items: center;
    }
    .header-right {
      flex: 1 1 auto;
      display: flex;
      align-items: center;
      justify-content: flex-end;
      gap: 8px;
      flex-wrap: nowrap;
      justify-self: end;
      grid-column: 3;
    }
    .star-logo {
      min-height: var(--header-row-min-height);
    }
    .star-logo__img,
    .star-logo .star-fallback {
      display: block;
      width: var(--star-logo-size-mobile);
      height: var(--star-logo-size-mobile);
      transition: opacity 160ms ease;
      grid-area: 1 / 1;
    }
    .star-logo__img--hover {
      opacity: 0;
      pointer-events: none;
    }
    .star-logo:hover .star-logo__img--hover,
    .star-logo:focus-visible .star-logo__img--hover {
      opacity: 1;
    }
    .star-logo:hover .star-logo__img--default,
    .star-logo:focus-visible .star-logo__img--default {
      opacity: 0;
    }

    /* Icons to the right; show only trigger on mobile */
    /* Inline search hidden on mobile; use icon instead */
    .header-actions .header-search {
      display: none;
    }
    /* Show the search trigger placed inside actions; hide the one in header-search */
    .search-trigger--actions {
      display: inline-flex;
    }
    .header-search > .search-trigger {
      display: none;
    }
    .search-form {
      display: none;
    }
    .search-input {
      padding: 8px 40px 8px 12px;
      font-size: 14px;
    }
    .search-button {
      padding: 8px 12px;
    }

    .header-actions {
      gap: 10px;
      font-size: 12px;
      align-items: center;
      order: 3;
    }
    .header-actions {
      margin-left: auto;
      order: 3;
    }
    .header-actions > * {
      flex: 0 0 auto;
    }
    .header-actions .header-cart,
    .header-actions .checkout-link,
    .header-actions .search-trigger--actions,
    .header-actions .sidebar-toggle--header,
    .header-actions .header-locale {
      flex-shrink: 0;
    }
    /* Mobile: order FLAG ‚Üí SEARCH ICON ‚Üí BURGER ‚Üí CART ‚Üí CHECKOUT */
    .header-actions .header-locale {
      order: 1;
    }
    .header-actions .search-trigger--actions {
      order: 2;
    }
    .header-actions .header-cart {
      order: 3;
    }
    .header-actions .checkout-link {
      order: 4;
    }
    .header-cart {
      display: inline-flex;
      align-items: center;
    }
    .cart-count {
      font-size: 14px;
    }
    .locale-switcher summary {
      padding: 4px;
    }

    /* Show icons, hide text on small screens */
    .nav-icon {
      display: inline-block;
    }
    .nav-text {
      display: none;
    }
    .header-cart .cart-count {
      padding: 0px;
      margin-top: -10px;
      font-size: 14px;
      transform: translateY(-3px);
    }

    /* Hide account icon on small screens, keep checkout visible */
    .header-actions a.header-account {
      display: none;
    }

    .logo-placeholder {
      padding: 10px 15px;
      font-size: 12px;
    }

    .cart-sidebar {
      width: 300px;
      right: -300px;
    }

    .cart-item-image {
      width: 56px;
      height: 56px;
    }

    .cart-item-image img {
      width: 100%;
      height: 100%;
      object-fit: contain;
    }
  }

  /* Clear Cart Modal - Retro Black/White */
  .clear-cart-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.98);
    /* enforce black/white palette */
    --modal-bg: #000;
    --modal-fg: #fff;
    background: var(--modal-bg);
    color: var(--modal-fg);
    font-family: 'Times New Roman', Times, serif;
    border: 2px solid var(--modal-fg);
    z-index: 1001;
    width: 380px;
    max-width: 92vw;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.25s ease, visibility 0.25s ease, transform 0.25s ease;
    box-shadow: none;
  }
  .clear-cart-modal.open {
    opacity: 1;
    visibility: visible;
    transform: translate(-50%, -50%) scale(1);
  }

  .modal-content {
    padding: 20px;
    background: transparent;
  }
  .modal-content h3 {
    color: var(--modal-fg);
    margin: 0 0 12px 0;
    font-size: 22px;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  .modal-content p {
    color: var(--modal-fg);
    margin: 0 0 16px 0;
    text-align: center;
    font-size: 15px;
    line-height: 1.6;
  }

  .modal-actions {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    justify-content: center;
  }

  .modal-actions .btn {
    flex: 1;
    min-width: 140px;
    text-align: center;
  }

  .modal-btn.modal-cancel {
    --btn-color: var(--modal-fg);
    --btn-border: color-mix(in oklab, var(--modal-fg), transparent 55%);
    --btn-hover-bg: color-mix(in oklab, var(--modal-fg), transparent 88%);
    --btn-hover-border: color-mix(in oklab, var(--modal-fg), transparent 32%);
  }

  .modal-btn.modal-confirm {
    --btn-color: var(--modal-bg);
  }

  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }
  .modal-overlay.open {
    opacity: 1;
    visibility: visible;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  @keyframes slideOutRight {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
{% endstylesheet %}

{% javascript %}
  document.addEventListener('DOMContentLoaded', function () {
    // Keep content from jumping under fixed header by syncing spacer height
    const headerEl = document.querySelector('.site-header');
    const headerSpacer = document.getElementById('site-header-spacer');
    const setHeaderSpacer = () => {
      if (!headerEl || !headerSpacer) return;
      const rect = headerEl.getBoundingClientRect();
      const computed = getComputedStyle(headerEl);
      const padTop = parseFloat(computed.paddingTop) || 0;
      const padBottom = parseFloat(computed.paddingBottom) || 0;
      const height = rect.height; // already includes paddings
      headerSpacer.style.setProperty('height', `${height}px`);
      document.documentElement.style.setProperty('--site-header-height', `${height}px`);
    };
    setHeaderSpacer();
    window.addEventListener('resize', () => {
      setHeaderSpacer();
    });
    const cartToggle = document.getElementById('cart-toggle');
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartOverlay = document.getElementById('cart-overlay');
    const cartClose = document.getElementById('cart-close');
    const cartItems = document.getElementById('cart-items');
    const cartCount = document.getElementById('cart-count');
    const cartTotal = document.getElementById('cart-total');
    // Localized option labels mapping via themeStrings (set in layout)
    const translateOptionName = (name) => {
      if (!name) return '';
      const key = String(name).trim().toLowerCase();
      if (key === 'size' || key === 'tamanho') return window.themeStrings?.option_size_label || name;
      if (key === 'color' || key === 'cor') return window.themeStrings?.option_color_label || name;
      return name;
    };

    // Store current cart data for stock validation
    let currentCartData = null;

    // Open cart sidebar
    function openCart() {
      cartSidebar.classList.add('open');
      cartOverlay.classList.add('open');
      document.body.style.overflow = 'hidden';
      loadCartItems();
    }

    // Close cart sidebar
    function closeCart() {
      cartSidebar.classList.remove('open');
      cartOverlay.classList.remove('open');
      document.body.style.overflow = '';
    }

    // Event listeners
    cartToggle.addEventListener('click', function (e) {
      e.preventDefault();
      openCart();
    });

    cartClose.addEventListener('click', closeCart);
    cartOverlay.addEventListener('click', closeCart);

    // Load cart items via AJAX
    function loadCartItems() {
      fetch('/cart.js')
        .then((response) => response.json())
        .then((cart) => {
          // Store cart data for stock validation
          currentCartData = cart;

          renderCartItems(cart);
          updateCartCount(cart.item_count);
          updateCartTotal(cart.total_price);
        })
        .catch((error) => {
          console.error('Error loading cart:', error);
        });
    }

    // Render cart items
    function renderCartItems(cart) {
      // Store cart data for stock validation
      currentCartData = cart;

      if (cart.items.length === 0) {
        cartItems.innerHTML = `
        <div class="cart-empty">
          <p>${window.themeStrings?.cart_empty_title || 'Your cart is empty'}</p>
        </div>
      `;
        return;
      }

      cartItems.innerHTML = cart.items
        .map((item) => {
          // Build translated variant string from options
          let variantHtml = '';
          const opts = Array.isArray(item.options_with_values) ? item.options_with_values : [];
          const nonDefault = !(opts.length === 1 && String(opts[0]?.name || '').toLowerCase() === 'title');
          if (opts.length && nonDefault) {
            const parts = opts.map((ov) => `${translateOptionName(ov.name)}: ${ov.value}`);
            variantHtml = `<div class="cart-item-variant">${parts.join(' / ')}</div>`;
          }

          return `
      <div class="cart-item" data-key="${item.key}">
        <div class="cart-item-image">
          <img src="${item.featured_image ? item.featured_image.url + '?width=160' : ''}" alt="${
            item.product_title
          }" loading="lazy" width="80" height="80">
        </div>
        <div class="cart-item-details">
          <div class="cart-item-title">${item.product_title}</div>
          ${variantHtml}
          <div class="cart-item-row">
            <div class="cart-item-price">${formatMoneyEuro(item.line_price)}</div>
            <div class="cart-item-quantity">
              <button class="btn btn--outline btn--icon quantity-btn quantity-decrease" data-key="${item.key}" ${
            item.quantity <= 1 ? 'disabled' : ''
          }>‚àí</button>
              <span class="quantity-display">${item.quantity}</span>
              <button class="btn btn--outline btn--icon quantity-btn quantity-increase" data-key="${item.key}" 
                ${
                  item.variant &&
                  item.variant.inventory_management === 'shopify' &&
                  item.variant.inventory_policy === 'deny' &&
                  item.variant.inventory_quantity !== null &&
                  item.variant.inventory_quantity <= item.quantity
                    ? 'disabled'
                    : ''
                }>+</button>
            </div>
          </div>
          ${
            item.variant && item.variant.inventory_management === 'shopify' && item.variant.inventory_quantity !== null
              ? `<div class="cart-item-stock">${item.variant.inventory_quantity} ${
                  window.themeStrings?.stock_available_suffix || 'available'
                }</div>`
              : ''
          }
        </div>
      </div>
      `;
        })
        .join('');

      // Add event listeners for quantity buttons
      addQuantityListeners();
    }

    // Add quantity change listeners
    function addQuantityListeners() {
      const decreaseButtons = document.querySelectorAll('.quantity-decrease');
      const increaseButtons = document.querySelectorAll('.quantity-increase');

      decreaseButtons.forEach((btn) => {
        btn.addEventListener('click', function () {
          const key = this.dataset.key;
          const currentQty = parseInt(this.nextElementSibling.textContent);
          if (currentQty > 1) {
            updateCartItem(key, currentQty - 1);
          } else {
            removeCartItem(key);
          }
        });
      });

      increaseButtons.forEach((btn) => {
        btn.addEventListener('click', function () {
          const key = this.dataset.key;
          const currentQty = parseInt(this.previousElementSibling.textContent);
          const newQty = currentQty + 1;

          // Check if we can increase using the same logic as main cart
          if (canIncreaseQuantity(key, newQty)) {
            updateCartItem(key, newQty);
          }
        });
      });
    }

    // Helper function to check if quantity can be increased (same as main cart)
    function canIncreaseQuantity(key, newQuantity) {
      // First try to get stock info from DOM
      const stockInfo = document.querySelector(`.cart-item[data-key="${key}"] .cart-item-stock`);

      if (stockInfo) {
        // Extract available stock from text, language-agnostic: just take the first number
        const stockText = stockInfo.textContent;
        const availableStock = parseInt(stockText.match(/(\d+)/)?.[1]);

        if (availableStock && newQuantity > availableStock) {
          const msgTpl = window.themeStrings?.only_x_available || 'Only ___COUNT___ items available in stock.';
          showError(msgTpl.replace('___COUNT___', availableStock));
          return false;
        }
      } else if (currentCartData && currentCartData.items) {
        // Fallback to cart data if DOM stock info not available
        const item = currentCartData.items.find((item) => item.key === key);

        if (
          item &&
          item.variant &&
          item.variant.inventory_management === 'shopify' &&
          item.variant.inventory_policy === 'deny' &&
          item.variant.inventory_quantity !== null
        ) {
          const availableStock = item.variant.inventory_quantity;

          if (newQuantity > availableStock) {
            const msgTpl = window.themeStrings?.only_x_available || 'Only ___COUNT___ items available in stock.';
            showError(msgTpl.replace('___COUNT___', availableStock));
            return false;
          }
        }
      }

      return true;
    }

    // Update cart item quantity
    function updateCartItem(key, quantity) {
      const formData = new FormData();
      formData.append('updates[' + key + ']', quantity);

      fetch('/cart/update.js', {
        method: 'POST',
        body: formData,
      })
        .then((response) => response.json())
        .then((cart) => {
          // Update stored cart data first
          currentCartData = cart;

          renderCartItems(cart);
          updateCartCount(cart.item_count);
          updateCartTotal(cart.total_price);

          // Broadcast cart update event for main cart page
          window.dispatchEvent(
            new CustomEvent('cartUpdated', {
              detail: { cart: cart, source: 'sidebar' },
            })
          );
        })
        .catch((error) => {
          console.error('Error updating cart:', error);
        });
    }

    // Remove cart item
    function removeCartItem(key) {
      updateCartItem(key, 0);
    }

    // Update cart count in header
    function updateCartCount(count) {
      cartCount.textContent = `(${count})`;
    }

    // Update cart total
    function updateCartTotal(totalPrice) {
      cartTotal.textContent = formatMoneyEuro(totalPrice);
    }

    // Format money using shop currency (fallback to simple format)
    function formatMoneyEuro(cents) {
      const amount = Math.abs(cents || 0);
      const euros = Math.floor(amount / 100);
      const centsPart = amount % 100;
      const centsStr = String(centsPart).padStart(2, '0');
      const eurosStr = String(euros).replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      return `${eurosStr},${centsStr} ‚Ç¨`;
    }

    // Show error notification
    function showError(message) {
      // Create a simple error notification
      const errorDiv = document.createElement('div');
      errorDiv.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
  background-color: var(--color-primary);
  color: var(--color-foreground);
      padding: 15px 20px;
      border-radius: 6px;
      z-index: 10000;
      font-size: 14px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.3);
      animation: slideInRight 0.3s ease;
    `;
      errorDiv.textContent = message;

      document.body.appendChild(errorDiv);

      setTimeout(() => {
        errorDiv.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
          if (document.body.contains(errorDiv)) {
            document.body.removeChild(errorDiv);
          }
        }, 300);
      }, 3000);
    }

    // Global function to add item and update cart (called from product page)
    window.addToCartAndUpdate = function (formData) {
      return fetch('/cart/add.js', {
        method: 'POST',
        body: formData,
      })
        .then((response) => response.json())
        .then((data) => {
          // Update cart count immediately
          return fetch('/cart.js');
        })
        .then((response) => response.json())
        .then((cart) => {
          // Update stored cart data
          currentCartData = cart;

          updateCartCount(cart.item_count);

          // Broadcast cart update event for main cart page
          window.dispatchEvent(
            new CustomEvent('cartUpdated', {
              detail: { cart: cart, source: 'sidebar' },
            })
          );

          return cart;
        });
    };

    // Clear Cart Modal Functionality
    const clearCartBtn = document.getElementById('clear-cart-btn');
    const clearCartModal = document.getElementById('clear-cart-modal');
    const modalOverlay = document.getElementById('modal-overlay');
    const modalCancel = document.getElementById('modal-cancel');
    const modalConfirm = document.getElementById('modal-confirm');

    // Open modal
    if (clearCartBtn) {
      clearCartBtn.addEventListener('click', function () {
        clearCartModal.classList.add('open');
        modalOverlay.classList.add('open');
      });
    }

    // Close modal
    function closeModal() {
      clearCartModal.classList.remove('open');
      modalOverlay.classList.remove('open');
    }

    if (modalCancel) {
      modalCancel.addEventListener('click', closeModal);
    }

    if (modalOverlay) {
      modalOverlay.addEventListener('click', closeModal);
    }

    // Confirm clear cart
    if (modalConfirm) {
      modalConfirm.addEventListener('click', function () {
        // Clear cart via Shopify API
        fetch('/cart/clear.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        })
          .then((response) => {
            if (response.ok) {
              // Update UI immediately
              updateCartCount(0);
              cartItems.innerHTML =
                '<p style="color: #cccccc; text-align: center; padding: 40px;">' +
                (window.themeStrings?.cart_empty_title || 'Your cart is empty') +
                '</p>';
              cartTotal.textContent = formatMoneyEuro(0);

              // Broadcast cart clear event for main cart page
              window.dispatchEvent(
                new CustomEvent('cartCleared', {
                  detail: { source: 'sidebar' },
                })
              );

              // Close modal and cart
              closeModal();
              closeCart();
            } else {
              throw new Error('Failed to clear cart');
            }
          })
          .catch((error) => {
            closeModal();
          });
      });
    }

    // Listen for cart updates from main cart page
    window.addEventListener('cartUpdated', function (event) {
      if (event.detail.source !== 'sidebar') {
        const cart = event.detail.cart;

        // Update stored cart data
        currentCartData = cart;

        updateCartCount(cart.item_count);
        updateCartTotal(cart.total_price);

        // If sidebar is open, refresh the items
        if (cartSidebar.classList.contains('open')) {
          renderCartItems(cart);
        }
      }
    });

    // Listen for cart clear events from main cart page
    window.addEventListener('cartCleared', function (event) {
      if (event.detail.source !== 'sidebar') {
        updateCartCount(0);
        cartTotal.textContent = formatMoneyEuro(0);

        // If sidebar is open, show empty state
        if (cartSidebar.classList.contains('open')) {
          cartItems.innerHTML = '<p style="color: #cccccc; text-align: center; padding: 40px;">Your cart is empty</p>';
        }
      }
    });

    // Search modal
    const searchTriggers = document.querySelectorAll('.search-trigger');
    const searchModal = document.getElementById('search-modal');
    const searchOverlay = document.getElementById('search-overlay');
    const searchModalInput = document.getElementById('search-modal-input');
    const searchModalContent = document.querySelector('#search-modal .search-modal-content');
    const searchModalForm = searchModal?.querySelector('form');
    const openSearch = () => {
      if (!searchModal || !searchOverlay) return;
      searchModal.classList.add('open');
      searchOverlay.classList.add('open');
      setTimeout(() => searchModalInput?.focus(), 0);
    };
    const closeSearch = () => {
      if (!searchModal || !searchOverlay) return;
      searchModal.classList.remove('open');
      searchOverlay.classList.remove('open');
    };
    if (searchTriggers && searchTriggers.length) {
      for (const btn of searchTriggers) {
        btn.addEventListener('click', openSearch);
      }
    }
    searchOverlay?.addEventListener('click', closeSearch);
    // Close when clicking outside of the modal content
    searchModal?.addEventListener('click', (e) => {
      if (!searchModalContent) return;
      if (!searchModalContent.contains(e.target)) closeSearch();
    });
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') closeSearch();
    });
    // Auto close search modal on submit
    if (searchModalForm) {
      searchModalForm.addEventListener('submit', () => {
        // Let navigation proceed, but close the UI instantly for perceived responsiveness
        closeSearch();
      });
    }
  });
{% endjavascript %}

{% schema %}
{
  "name": "Header",
  "settings": [
    {
      "type": "image_picker",
      "id": "logo",
      "label": "Logo Image"
    },
    {
      "type": "image_picker",
      "id": "star_image",
      "label": "Mobile center star image",
      "info": "Optional. If not set, a vector star icon will be used."
    }
  ]
}
{% endschema %}
