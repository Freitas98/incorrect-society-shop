<div class="cd-music-player-minimal">
	<a id="cdPlayPause" class="cd-play-btn-minimal" aria-label="Play/Pause" type="button">
		<span id="cd-icon-play">
			<svg width="38" height="38" viewBox="0 0 38 38" fill="white"><polygon points="10,7 32,19 10,31"/></svg>
		</span>
		<span id="cd-icon-pause" style="display:none;">
			<svg width="38" height="38" viewBox="0 0 38 38" fill="white"><rect x="10" y="7" width="7" height="24" rx="2"/><rect x="21" y="7" width="7" height="24" rx="2"/></svg>
		</span>
	</a>
	<a href="https://open.spotify.com/playlist/4mtoSf0Fh48ecJHF9MJiG1?si=_l840rJIQM2YWJbwExCXYw&pi=mEFiEApITtuu4" target="_blank" rel="noopener" tabindex="0">
		<img height="50" width="50" src="https://cdn.shopify.com/s/files/1/0954/9840/4181/files/Logo.jpg?v=1749137548" alt="CD Cover" class="cd-cover-minimal" id="cdCoverImg" />
	</a>
	<audio id="cdAudioPlayer" preload="auto" autoplay src="https://cdn.shopify.com/s/files/1/0954/9840/4181/files/MAFIA.mp3?v=1755727841"></audio>
</div>
<style>
.cd-music-player-minimal {
	display: flex;
	align-items: center;
	justify-content: center;
	gap: 18px;
	background: transparent;
	border-radius: 16px;
	padding: 0;
	max-width: 220px;
	margin-left: auto;
	margin-right: auto;
	margin-top: 0;
	margin-bottom: 20px;
}
.cd-play-btn-minimal {
	background: none;
	border: none;
	outline: none;
	cursor: pointer;
	padding: 0;
	display: flex;
	align-items: center;
	justify-content: center;
}
.cd-play-btn-minimal svg polygon {
	transition: fill 0.15s;
}
.cd-play-btn-minimal:hover svg polygon {
	fill: #8f2b3f;
}

.cd-play-btn-minimal:hover svg rect {
	fill: #8f2b3f;
}

.cd-cover-minimal {
	width: 64px;
	height: 64px;
	border-radius: 50%;
	box-shadow: 0 2px 8px #000a;
	border: 2px solid #222;
	background: #111;
	object-fit: cover;
	transition: box-shadow 0.2s;
}
.cd-cover-minimal.rotating {
	animation: cd-spin 2.5s linear infinite;
}
@keyframes cd-spin {
	0% { transform: rotate(0deg); }
	100% { transform: rotate(360deg); }
}
</style>
<script>
// Minimal CD player: play/pause, rotating CD, click CD to open Spotify, and persist state
document.addEventListener('DOMContentLoaded', function() {
	var audio = document.getElementById('cdAudioPlayer');
	var playBtn = document.getElementById('cdPlayPause');
	var iconPlay = document.getElementById('cd-icon-play');
	var iconPause = document.getElementById('cd-icon-pause');
	var cdCover = document.getElementById('cdCoverImg');

	// Restore state from localStorage
		var savedTime = parseFloat(localStorage.getItem('musicPlayerTime') || '0');
			var wasPaused = localStorage.getItem('musicPlayerPaused') === 'true';
			// Always set intent to play by default unless user paused
			if (!wasPaused) {
				playBtn.setAttribute('data-intent', 'play');
			}

			// Set initial UI state
			function updateIcons() {
				if (audio.paused) {
					iconPlay.style.display = '';
					iconPause.style.display = 'none';
					cdCover.classList.remove('rotating');
				} else {
					iconPlay.style.display = 'none';
					iconPause.style.display = '';
					cdCover.classList.add('rotating');
				}
			}

		// Set up global play on any user interaction if needed
		function globalTryPlay() {
			if (audio.paused && playBtn.getAttribute('data-intent') === 'play') {
				audio.play().catch(function(){});
			}
		}
		document.addEventListener('click', globalTryPlay, true);
		document.addEventListener('touchstart', globalTryPlay, true);
		document.addEventListener('keydown', globalTryPlay, true);

			// Play/pause button logic
			playBtn.addEventListener('click', function(e) {
				e.preventDefault();
				if (audio.paused) {
					playBtn.setAttribute('data-intent', 'play');
					localStorage.setItem('musicPlayerPaused', 'false');
					audio.play().catch(function(){});
				} else {
					playBtn.setAttribute('data-intent', 'pause');
					localStorage.setItem('musicPlayerPaused', 'true');
					audio.pause();
				}
				// updateIcons will be called by play/pause event listeners
			});

	// If user tries to play via keyboard or other means, also set intent
	playBtn.addEventListener('keydown', function(e) {
		if (audio.paused) playBtn.setAttribute('data-intent', 'play');
	});

			// Save play state
			audio.addEventListener('play', function() {
				updateIcons();
				localStorage.setItem('musicPlayerPaused', 'false');
			});
			audio.addEventListener('pause', function() {
				updateIcons();
				localStorage.setItem('musicPlayerPaused', 'true');
			});
	// Save time
	audio.addEventListener('timeupdate', function() {
		localStorage.setItem('musicPlayerTime', audio.currentTime);
	});

		// Restore time and play state on load
		audio.addEventListener('loadedmetadata', function() {
			if (!isNaN(savedTime) && savedTime > 0 && savedTime < audio.duration) {
				audio.currentTime = savedTime;
			}
			if (wasPaused) {
				playBtn.setAttribute('data-intent', 'pause');
				audio.pause();
			} else {
				playBtn.setAttribute('data-intent', 'play');
				audio.play().catch(function(){});
			}
			updateIcons();
		});

	// Set UI to match state on first load
	updateIcons();
});
</script>
