{% comment %}
  Newsletter Content
  Usage: {% render 'newsletter-content' %}
{% endcomment %}

<!-- Social icons are shown in the left sidebar above the newsletter link -->

<h2 class="newsletter-heading">{{ 'newsletter.stay_connected_title' | t }}</h2>
<p class="newsletter-intro">{{ 'newsletter.intro_html' | t }}</p>

<div
  id="NewsletterContainer"
  class="contact-card newsletter-card u-text-center"
  data-adding="{{ 'theme.messages.adding' | t }}"
  data-success="{{ 'newsletter.success' | t }}"
  data-error="{{ 'newsletter.error' | t }}"
  data-verifying="{{ 'newsletter.verifying' | t }}"
  data-captcha="{{ 'newsletter.captcha_message' | t }}"
>
  <h3 class="newsletter-highlight">{{ 'newsletter.subscribe_now' | t }}</h3>
  <p class="newsletter-copy">
    {{ 'newsletter.subscribe_prompt' | t }}
  </p>

  {% form 'customer', id: 'NewsletterForm', class: 'contact-form newsletter-form' %}
    {% if form.posted_successfully? %}
      <p class="newsletter-success newsletter-feedback">
        {{ 'newsletter.success' | t }}
      </p>
    {% endif %}
    {% if form.errors %}
      <div class="newsletter-errors newsletter-feedback">
        {{ form.errors | default_errors }}
      </div>
    {% endif %}
    <div class="newsletter-message newsletter-feedback" aria-live="polite" hidden></div>

    <input
      type="text"
      name="contact[first_name]"
      id="NewsletterForm-name"
      placeholder="{{ 'newsletter.name_placeholder' | t }}"
      autocomplete="given-name"
      class="contact-field"
    >

    <input
      type="email"
      name="contact[email]"
      id="NewsletterForm-email"
      placeholder="{{ 'newsletter.email_placeholder' | t }}"
      autocomplete="email"
      required
      class="contact-field"
    >

    <input type="hidden" name="contact[tags]" id="NewsletterContentTags" value="">

    <button
      type="submit"
      class="btn btn--primary btn--block u-mt-xs"
    >
      {{ 'newsletter.subscribe_cta' | t }}
    </button>
  {% endform %}
</div>

{% javascript %}
  const form = document.getElementById('NewsletterForm');
  const container = document.getElementById('NewsletterContainer');
  const tagsInput = document.getElementById('NewsletterContentTags');
  // Generate a strong, uppercase, mostly-unique code
  const generateRandomCode = (len = 16) => {
    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    const out = [];
    const arr =
      window.crypto && window.crypto.getRandomValues
        ? window.crypto.getRandomValues(new Uint32Array(len))
        : Array.from({ length: len }, () => Math.floor(Math.random() * 0xffffffff));
    for (let i = 0; i < len; i++) {
      out.push(alphabet[arr[i] % alphabet.length]);
    }
    return out.join('');
  };
  if (form && container && tagsInput) {
    const message = form.querySelector('.newsletter-message');
    const submitButton = form.querySelector('button[type="submit"]');
    const setMessage = (state, text) => {
      if (!message) {
        return;
      }
      message.textContent = text;
      if (state) {
        message.dataset.state = state;
      } else {
        delete message.dataset.state;
      }
      message.hidden = !text;
    };

    const handleNewsletterSubmit = async (event) => {
      event.preventDefault();
      event.stopPropagation();
      if (event.stopImmediatePropagation) event.stopImmediatePropagation();
      // Set unique code in tags before submit
      tagsInput.value = generateRandomCode(16);
      if (!message || !submitButton) return;

      const tAdding = container.dataset.adding || 'Adding...';
      const tSuccess = container.dataset.success || 'Thanks for subscribing!';
      const tError = container.dataset.error || 'Something went wrong. Please try again.';
      const tVerifying = container.dataset.verifying || 'Verifying...';
      const tCaptcha = container.dataset.captcha || 'Please complete the verification to finish your subscription.';

      setMessage('', '');
      submitButton.disabled = true;
      const originalText = submitButton.textContent;
      submitButton.textContent = tAdding;

      try {
        const action = form.getAttribute('action') || '/contact';
        const formData = new FormData(form);
        const response = await fetch(action, {
          method: 'POST',
          body: formData,
          credentials: 'same-origin',
        });
        if (response.ok) {
          setMessage('success', tSuccess);
          form.reset();
        } else {
          // Fallback to normal submit for captcha/challenge or throttling or redirect-only responses
          const fallbackText = response.status === 429 ? tCaptcha : tVerifying;
          setMessage(response.status === 429 ? 'error' : 'info', fallbackText);
          form.removeEventListener('submit', handleNewsletterSubmit);
          form.submit();
          return;
        }
      } catch (e) {
        setMessage('error', tError);
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = originalText;
      }
    };

    form.addEventListener('submit', handleNewsletterSubmit);
  }
{% endjavascript %}

<p>
  <em class="text-soft text-small">{{ 'newsletter.unsubscribe_note' | t }}</em>
</p>

<div class="newsletter-social">
  <p>To stay updated, follow us on social media:</p>
  {% render 'social-icons', size: 32 %}
</div>
